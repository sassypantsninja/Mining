// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract ProofOfStakeCoin is ERC20, Ownable {
    struct Stake {
        uint256 amount;
        uint256 reward;
        uint256 timestamp;
    }

    mapping(address => Stake) public stakes;
    uint256 public rewardRate;

    constructor(uint256 initialSupply, uint256 _rewardRate) ERC20("ProofOfStakeCoin", "POSC") {
        _mint(msg.sender, initialSupply);
        rewardRate = _rewardRate;
    }

    function stakeTokens(uint256 amount) public {
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");
        _transfer(msg.sender, address(this), amount);

        if (stakes[msg.sender].amount > 0) {
            stakes[msg.sender].reward += calculateReward(msg.sender);
        }

        stakes[msg.sender].amount += amount;
        stakes[msg.sender].timestamp = block.timestamp;
    }

    function withdrawStake(uint256 amount) public {
        require(stakes[msg.sender].amount >= amount, "Insufficient staked amount");

        stakes[msg.sender].reward += calculateReward(msg.sender);
        stakes[msg.sender].amount -= amount;
        _transfer(address(this), msg.sender, amount);
        stakes[msg.sender].timestamp = block.timestamp;
    }

    function claimReward() public {
        uint256 reward = stakes[msg.sender].reward + calculateReward(msg.sender);
        require(reward > 0, "No rewards available");

        stakes[msg.sender].reward = 0;
        stakes[msg.sender].timestamp = block.timestamp;
        _mint(msg.sender, reward);
    }

    function calculateReward(address staker) internal view returns (uint256) {
        Stake memory stake = stakes[staker];
        uint256 stakingDuration = block.timestamp - stake.timestamp;
        return stake.amount * rewardRate * stakingDuration / 1e18;
    }

    function setRewardRate(uint256 _rewardRate) public onlyOwner {
        rewardRate = _rewardRate;
    }
}
